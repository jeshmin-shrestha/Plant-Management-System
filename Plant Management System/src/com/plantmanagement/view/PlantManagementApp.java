/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.plantmanagement.view;

import com.plantmanagement.controller.ValidationUtil;
import com.plantmanagement.controller.algorithms.SelectionSort;
import com.PlantManagement.model.PlantModel;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import com.plantmanagement.controller.algorithms.MergeSort;
import com.plantmanagement.controller.algorithms.BinarySearch;
import com.plantmanagement.controller.algorithms.InsertionSort;

import java.util.ArrayList;

/**
 *
 * @author Jeshmin Shrestha LUMID 23048596
 */
public class PlantManagementApp extends javax.swing.JFrame {

    private List<PlantModel> plantList;
    private java.awt.CardLayout cardLayout;
    private final ValidationUtil validationUtil;
    private final Color errorColor = new Color(255, 51, 0);
    private final Color yellowColor = new Color(239, 192, 32);
    private final SelectionSort selectionSort;
    private final MergeSort mergeSort;
    private final BinarySearch binarySearch;
    private final InsertionSort insertionSort;

    /**
     * Creates new form PlantManagementapp
     */
    public PlantManagementApp() {
        initComponents();// Initialize swing components
        validationUtil = new ValidationUtil();// Initialzie validation for input checks
        initializeLayout(); // Set up CardLayout and add screens
        initializeData(); // Initialize plant data and table
        startProgress(); // Show loading screen and initiate progress
        selectionSort = new SelectionSort(); //Initialize SelectionSort algorithm
        mergeSort = new MergeSort();//Initialize MergeSort algorithm
        insertionSort = new InsertionSort();//Initialize InsertionSort algorithm
        binarySearch = new BinarySearch();//Initialize BinarySort algorithm

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnlLoginScreen = new javax.swing.JPanel();
        jPanelLoginPage = new javax.swing.JPanel();
        jLabelLogoLogin = new javax.swing.JLabel();
        jPanelLoginData = new javax.swing.JPanel();
        jLabelUsername = new javax.swing.JLabel();
        jLabelPassword = new javax.swing.JLabel();
        jTxtFieldUsername = new javax.swing.JTextField();
        btnlogin = new javax.swing.JButton();
        jLabelFogotPassword = new javax.swing.JLabel();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jCheckBoxShowPassword = new javax.swing.JCheckBox();
        jlabelLoginError = new javax.swing.JLabel();
        jLabelCopyWriteLogin = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jpnlMainScreen = new javax.swing.JPanel();
        jTabbedPaneAdmin = new javax.swing.JTabbedPane();
        jPanelHomePage = new javax.swing.JPanel();
        jButtonManagePlantHome = new javax.swing.JButton();
        jLabelWelcomeHome = new javax.swing.JLabel();
        jLabelManageHome = new javax.swing.JLabel();
        jLabelGrowHome = new javax.swing.JLabel();
        jLabelSimplifyHome = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanelAdminControl = new javax.swing.JPanel();
        jPanelData = new javax.swing.JPanel();
        jTextFieldPlantPrice = new javax.swing.JTextField();
        jTextFieldStockQuantity = new javax.swing.JTextField();
        jTextFieldPlantName = new javax.swing.JTextField();
        jTextFieldPlantId = new javax.swing.JTextField();
        jComboBoxPlantCategory = new javax.swing.JComboBox<>();
        jComboBoxPlantGrowthStatus = new javax.swing.JComboBox<>();
        lblErrorMsgPlantId = new javax.swing.JLabel();
        lblErrorMsgPlantCategory = new javax.swing.JLabel();
        lblErrorMsgPlantGrowthStatus = new javax.swing.JLabel();
        lblErrorMsgStockQuantity = new javax.swing.JLabel();
        lblErrorMsgPlantPrice = new javax.swing.JLabel();
        lblErrorMsgPlantName = new javax.swing.JLabel();
        jComboBoxPlantBloomSeason = new javax.swing.JComboBox<>();
        jbtndDelete = new javax.swing.JButton();
        jbtnClear = new javax.swing.JButton();
        jbtnupdate = new javax.swing.JButton();
        jbtnAddPlant = new javax.swing.JButton();
        jPanelDashboard = new javax.swing.JPanel();
        jLabelTotalSalesData = new javax.swing.JLabel();
        jLabelTotalStockLevelData = new javax.swing.JLabel();
        jLabelLiveDashboardTitle = new javax.swing.JLabel();
        jLabelTotalSalesTitle = new javax.swing.JLabel();
        jLabelStockLevelTitle = new javax.swing.JLabel();
        lblErrorMsgPlantBloomSeason = new javax.swing.JLabel();
        jLabelPlantTable = new javax.swing.JLabel();
        jScrollPanePlantTable = new javax.swing.JScrollPane();
        jTablePlant = new javax.swing.JTable();
        jButtonSortPlantId = new javax.swing.JButton();
        jComboBoxSortOrder = new javax.swing.JComboBox<>();
        jTextFieldSearchBar = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonSortByName = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jButtonResetTable = new javax.swing.JButton();
        jButtonSortByPrice = new javax.swing.JButton();
        jPanelAboutUs = new javax.swing.JPanel();
        jLabelOurMissionAboutUs = new javax.swing.JLabel();
        jLabelControlAboutUs = new javax.swing.JLabel();
        jLabelTrackGrowthAboutUs = new javax.swing.JLabel();
        jLabelSortSearchAboutUs = new javax.swing.JLabel();
        jLabelControlManageAboutUs = new javax.swing.JLabel();
        jLabelImageAboutUs = new javax.swing.JLabel();
        jPanelFeedbackForm = new javax.swing.JPanel();
        jLabelFeedbackFormTitle = new javax.swing.JLabel();
        jTextFieldUsernameFeedback = new javax.swing.JTextField();
        jScrollPaneMessageFeedback = new javax.swing.JScrollPane();
        jTextAreaMessageFeedback = new javax.swing.JTextArea();
        jLabelUsernameFeedBack = new javax.swing.JLabel();
        jLabelFeedbackMessage = new javax.swing.JLabel();
        jLabelImageFeedback = new javax.swing.JLabel();
        jLabelUsernameError = new javax.swing.JLabel();
        jButtonSendFeedback = new javax.swing.JButton();
        btnlogout = new javax.swing.JButton();
        jLabelImageMainBarMainPanel = new javax.swing.JLabel();
        jLabelPlantTableTitle = new javax.swing.JLabel();
        jpnlMainloadingScreen = new javax.swing.JPanel();
        jLabelCopywrite = new javax.swing.JLabel();
        jProgressBarLoadingScreen = new javax.swing.JProgressBar();
        jLabelPleaseWait = new javax.swing.JLabel();
        jLabelLoadingScreenPicture = new javax.swing.JLabel();

        jpnlLoginScreen.setAutoscrolls(true);
        jpnlLoginScreen.setMaximumSize(new java.awt.Dimension(1130, 514));
        jpnlLoginScreen.setMinimumSize(new java.awt.Dimension(1130, 514));
        jpnlLoginScreen.setPreferredSize(new java.awt.Dimension(1130, 514));

        jPanelLoginPage.setBackground(new java.awt.Color(44, 44, 44));
        jPanelLoginPage.setMaximumSize(new java.awt.Dimension(1118, 599));
        jPanelLoginPage.setLayout(null);

        jLabelLogoLogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLogoLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/Green_and_White_Modern_Simple_Plant_Garden_Store_Logo-removebg-preview (1).png"))); // NOI18N
        jLabelLogoLogin.setText("jLabel5");
        jPanelLoginPage.add(jLabelLogoLogin);
        jLabelLogoLogin.setBounds(940, 40, 247, 136);

        jPanelLoginData.setBackground(new java.awt.Color(59, 68, 41));
        jPanelLoginData.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true));
        jPanelLoginData.setForeground(new java.awt.Color(153, 153, 153));

        jLabelUsername.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelUsername.setForeground(new java.awt.Color(255, 255, 255));
        jLabelUsername.setText("Username");

        jLabelPassword.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelPassword.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPassword.setText("Password");

        jTxtFieldUsername.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 10, true));
        jTxtFieldUsername.setMargin(new java.awt.Insets(10, 10, 10, 1000));

        btnlogin.setBackground(new java.awt.Color(0, 0, 0));
        btnlogin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnlogin.setForeground(new java.awt.Color(255, 255, 255));
        btnlogin.setText("Log In");
        btnlogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnloginActionPerformed(evt);
            }
        });

        jLabelFogotPassword.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabelFogotPassword.setForeground(new java.awt.Color(204, 204, 204));
        jLabelFogotPassword.setText("Forgot Password?");

        jPasswordFieldPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 10, true));

        jCheckBoxShowPassword.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jCheckBoxShowPassword.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxShowPassword.setText("Show Password");
        jCheckBoxShowPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShowPasswordActionPerformed(evt);
            }
        });

        jlabelLoginError.setBackground(new java.awt.Color(153, 153, 153));
        jlabelLoginError.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlabelLoginError.setForeground(new java.awt.Color(204, 0, 0));
        jlabelLoginError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelLoginDataLayout = new javax.swing.GroupLayout(jPanelLoginData);
        jPanelLoginData.setLayout(jPanelLoginDataLayout);
        jPanelLoginDataLayout.setHorizontalGroup(
            jPanelLoginDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginDataLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelLoginDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLoginDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnlogin, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addComponent(jLabelPassword)
                        .addComponent(jLabelUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelFogotPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTxtFieldUsername)
                        .addComponent(jPasswordFieldPassword))
                    .addComponent(jCheckBoxShowPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(jPanelLoginDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlabelLoginError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLoginDataLayout.setVerticalGroup(
            jPanelLoginDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginDataLayout.createSequentialGroup()
                .addComponent(jlabelLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTxtFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnlogin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFogotPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxShowPassword)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanelLoginPage.add(jPanelLoginData);
        jPanelLoginData.setBounds(400, 200, 410, 320);

        jLabelCopyWriteLogin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelCopyWriteLogin.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCopyWriteLogin.setText(" © 2024 Bagaicha");
        jPanelLoginPage.add(jLabelCopyWriteLogin);
        jLabelCopyWriteLogin.setBounds(990, 540, 200, 25);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/Screenshot 2024-12-21 193207 (2).png"))); // NOI18N
        jPanelLoginPage.add(jLabel12);
        jLabel12.setBounds(0, 0, 1980, 680);

        javax.swing.GroupLayout jpnlLoginScreenLayout = new javax.swing.GroupLayout(jpnlLoginScreen);
        jpnlLoginScreen.setLayout(jpnlLoginScreenLayout);
        jpnlLoginScreenLayout.setHorizontalGroup(
            jpnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnlLoginScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelLoginPage, javax.swing.GroupLayout.PREFERRED_SIZE, 1255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpnlLoginScreenLayout.setVerticalGroup(
            jpnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlLoginScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelLoginPage, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpnlMainScreen.setBackground(new java.awt.Color(163, 182, 139));
        jpnlMainScreen.setMaximumSize(new java.awt.Dimension(1467, 672));
        jpnlMainScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPaneAdmin.setForeground(new java.awt.Color(204, 204, 0));
        jTabbedPaneAdmin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jPanelHomePage.setLayout(null);

        jButtonManagePlantHome.setBackground(new java.awt.Color(163, 182, 139));
        jButtonManagePlantHome.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonManagePlantHome.setForeground(new java.awt.Color(255, 255, 255));
        jButtonManagePlantHome.setText("Manage Plants");
        jButtonManagePlantHome.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jButtonManagePlantHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManagePlantHomeActionPerformed(evt);
            }
        });
        jPanelHomePage.add(jButtonManagePlantHome);
        jButtonManagePlantHome.setBounds(420, 360, 190, 70);

        jLabelWelcomeHome.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabelWelcomeHome.setText("Welcome To Bagaicha ");
        jPanelHomePage.add(jLabelWelcomeHome);
        jLabelWelcomeHome.setBounds(180, 20, 500, 150);

        jLabelManageHome.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabelManageHome.setForeground(new java.awt.Color(0, 102, 102));
        jLabelManageHome.setText("Manage.");
        jPanelHomePage.add(jLabelManageHome);
        jLabelManageHome.setBounds(190, 220, 180, 110);

        jLabelGrowHome.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabelGrowHome.setForeground(new java.awt.Color(163, 182, 139));
        jLabelGrowHome.setText("Grow.");
        jLabelGrowHome.setToolTipText("");
        jPanelHomePage.add(jLabelGrowHome);
        jLabelGrowHome.setBounds(190, 300, 160, 80);

        jLabelSimplifyHome.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabelSimplifyHome.setForeground(new java.awt.Color(51, 51, 51));
        jLabelSimplifyHome.setText("Simplify.");
        jPanelHomePage.add(jLabelSimplifyHome);
        jLabelSimplifyHome.setBounds(190, 170, 180, 80);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/Add a heading (1).png"))); // NOI18N
        jLabel6.setMaximumSize(new java.awt.Dimension(1500, 800));
        jLabel6.setMinimumSize(new java.awt.Dimension(1500, 800));
        jLabel6.setPreferredSize(new java.awt.Dimension(1500, 800));
        jPanelHomePage.add(jLabel6);
        jLabel6.setBounds(0, -50, 1440, 620);

        jTabbedPaneAdmin.addTab("Home", jPanelHomePage);

        jPanelAdminControl.setBackground(new java.awt.Color(163, 182, 139));
        jPanelAdminControl.setForeground(new java.awt.Color(153, 0, 51));

        jPanelData.setBackground(new java.awt.Color(163, 182, 139));
        jPanelData.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldPlantPrice.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jTextFieldPlantPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 240, 60));

        jTextFieldStockQuantity.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Stock Quantity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jTextFieldStockQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 90, 210, 70));

        jTextFieldPlantName.setToolTipText("");
        jTextFieldPlantName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jTextFieldPlantName, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 240, 60));

        jTextFieldPlantId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Id", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jTextFieldPlantId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 60));

        jComboBoxPlantCategory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBoxPlantCategory.setForeground(new java.awt.Color(153, 153, 0));
        jComboBoxPlantCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indoor", "Outdoor", "Flowering", "Non-Flowering" }));
        jComboBoxPlantCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jComboBoxPlantCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 210, 70));

        jComboBoxPlantGrowthStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBoxPlantGrowthStatus.setForeground(new java.awt.Color(153, 153, 0));
        jComboBoxPlantGrowthStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sprouting", "Budding", "Flowering", "Fruiting", "Dormant" }));
        jComboBoxPlantGrowthStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Growth Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jComboBoxPlantGrowthStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 240, 70));

        lblErrorMsgPlantId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgPlantId.setForeground(new java.awt.Color(204, 0, 51));
        lblErrorMsgPlantId.setMaximumSize(new java.awt.Dimension(10, 0));
        lblErrorMsgPlantId.setMinimumSize(new java.awt.Dimension(10, 10));
        jPanelData.add(lblErrorMsgPlantId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 240, 20));

        lblErrorMsgPlantCategory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgPlantCategory.setForeground(new java.awt.Color(255, 0, 51));
        jPanelData.add(lblErrorMsgPlantCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, 210, 21));

        lblErrorMsgPlantGrowthStatus.setForeground(new java.awt.Color(204, 0, 51));
        jPanelData.add(lblErrorMsgPlantGrowthStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 230, 17));

        lblErrorMsgStockQuantity.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgStockQuantity.setForeground(new java.awt.Color(153, 0, 51));
        jPanelData.add(lblErrorMsgStockQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 220, 23));

        lblErrorMsgPlantPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgPlantPrice.setForeground(new java.awt.Color(153, 0, 0));
        jPanelData.add(lblErrorMsgPlantPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 240, 20));

        lblErrorMsgPlantName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgPlantName.setForeground(new java.awt.Color(153, 0, 51));
        jPanelData.add(lblErrorMsgPlantName, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 240, 20));

        jComboBoxPlantBloomSeason.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBoxPlantBloomSeason.setForeground(new java.awt.Color(153, 153, 0));
        jComboBoxPlantBloomSeason.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Summer", "Winter", "Autumn", "Spring", "Year Round" }));
        jComboBoxPlantBloomSeason.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plant Bloom Season", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(204, 204, 0))); // NOI18N
        jPanelData.add(jComboBoxPlantBloomSeason, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, 240, 70));

        jbtndDelete.setBackground(new java.awt.Color(163, 182, 139));
        jbtndDelete.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jbtndDelete.setForeground(new java.awt.Color(255, 255, 255));
        jbtndDelete.setText("Delete");
        jbtndDelete.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.white));
        jbtndDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtndDeleteActionPerformed(evt);
            }
        });
        jPanelData.add(jbtndDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 140, 40));

        jbtnClear.setBackground(new java.awt.Color(163, 182, 139));
        jbtnClear.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jbtnClear.setForeground(new java.awt.Color(255, 255, 255));
        jbtnClear.setText("Clear");
        jbtnClear.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.white));
        jbtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearActionPerformed(evt);
            }
        });
        jPanelData.add(jbtnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 190, 120, 40));

        jbtnupdate.setBackground(new java.awt.Color(163, 182, 139));
        jbtnupdate.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jbtnupdate.setForeground(new java.awt.Color(255, 255, 255));
        jbtnupdate.setText("Update");
        jbtnupdate.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.white));
        jbtnupdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtnupdateMouseClicked(evt);
            }
        });
        jbtnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnupdateActionPerformed(evt);
            }
        });
        jPanelData.add(jbtnupdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, 130, 40));

        jbtnAddPlant.setBackground(new java.awt.Color(163, 182, 139));
        jbtnAddPlant.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jbtnAddPlant.setForeground(new java.awt.Color(255, 255, 255));
        jbtnAddPlant.setText("Add New Plant");
        jbtnAddPlant.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.white));
        jbtnAddPlant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddPlantActionPerformed(evt);
            }
        });
        jPanelData.add(jbtnAddPlant, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 160, 40));

        jPanelDashboard.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDashboard.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabelTotalSalesData.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N

        jLabelTotalStockLevelData.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N

        jLabelLiveDashboardTitle.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabelLiveDashboardTitle.setForeground(new java.awt.Color(163, 182, 139));
        jLabelLiveDashboardTitle.setText("Live Dashboard");

        jLabelTotalSalesTitle.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabelTotalSalesTitle.setForeground(new java.awt.Color(163, 182, 139));
        jLabelTotalSalesTitle.setText("Total Sales");

        jLabelStockLevelTitle.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabelStockLevelTitle.setForeground(new java.awt.Color(163, 182, 139));
        jLabelStockLevelTitle.setText("Stock Level");

        javax.swing.GroupLayout jPanelDashboardLayout = new javax.swing.GroupLayout(jPanelDashboard);
        jPanelDashboard.setLayout(jPanelDashboardLayout);
        jPanelDashboardLayout.setHorizontalGroup(
            jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDashboardLayout.createSequentialGroup()
                .addGroup(jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDashboardLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelTotalStockLevelData, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTotalSalesData, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelDashboardLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLiveDashboardTitle)
                            .addGroup(jPanelDashboardLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelStockLevelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelTotalSalesTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanelDashboardLayout.setVerticalGroup(
            jPanelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDashboardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelLiveDashboardTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelTotalSalesTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabelTotalSalesData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabelStockLevelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTotalStockLevelData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanelData.add(jPanelDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 0, 260, 200));

        lblErrorMsgPlantBloomSeason.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblErrorMsgPlantBloomSeason.setForeground(new java.awt.Color(153, 0, 51));
        jPanelData.add(lblErrorMsgPlantBloomSeason, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, 240, 20));

        jLabelPlantTable.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelPlantTable.setForeground(java.awt.Color.white);
        jLabelPlantTable.setText("Plant Table");

        jTablePlant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plant ID", "Plant Name", "Plant Category", "Growth Stage", "Plant Blooming Season", "Stock Quantity", "Added Date", "Plant Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePlant.setColumnSelectionAllowed(true);
        jTablePlant.getTableHeader().setReorderingAllowed(false);
        jTablePlant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePlantMouseClicked(evt);
            }
        });
        jScrollPanePlantTable.setViewportView(jTablePlant);
        jTablePlant.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTablePlant.getColumnModel().getColumnCount() > 0) {
            jTablePlant.getColumnModel().getColumn(0).setResizable(false);
            jTablePlant.getColumnModel().getColumn(1).setResizable(false);
            jTablePlant.getColumnModel().getColumn(2).setResizable(false);
            jTablePlant.getColumnModel().getColumn(3).setResizable(false);
            jTablePlant.getColumnModel().getColumn(4).setResizable(false);
            jTablePlant.getColumnModel().getColumn(5).setResizable(false);
            jTablePlant.getColumnModel().getColumn(6).setResizable(false);
            jTablePlant.getColumnModel().getColumn(7).setResizable(false);
        }

        jButtonSortPlantId.setBackground(new java.awt.Color(163, 182, 139));
        jButtonSortPlantId.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonSortPlantId.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSortPlantId.setText("Sort Plant ID");
        jButtonSortPlantId.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        jButtonSortPlantId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortPlantIdActionPerformed(evt);
            }
        });

        jComboBoxSortOrder.setForeground(new java.awt.Color(163, 182, 139));
        jComboBoxSortOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        jComboBoxSortOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 1, 12), new java.awt.Color(163, 182, 139))); // NOI18N

        jButtonSearch.setBackground(new java.awt.Color(163, 182, 139));
        jButtonSearch.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonSearch.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearch.setText("Search");
        jButtonSearch.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonSortByName.setBackground(new java.awt.Color(163, 182, 139));
        jButtonSortByName.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonSortByName.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSortByName.setText("Sort By Name");
        jButtonSortByName.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        jButtonSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortByNameActionPerformed(evt);
            }
        });

        jLabelSearch.setForeground(new java.awt.Color(153, 0, 51));

        jButtonResetTable.setBackground(new java.awt.Color(163, 182, 139));
        jButtonResetTable.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonResetTable.setForeground(new java.awt.Color(255, 255, 255));
        jButtonResetTable.setText("Reset ");
        jButtonResetTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButtonResetTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetTableActionPerformed(evt);
            }
        });

        jButtonSortByPrice.setBackground(new java.awt.Color(163, 182, 139));
        jButtonSortByPrice.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonSortByPrice.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSortByPrice.setText("Sort By Price");
        jButtonSortByPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButtonSortByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortByPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAdminControlLayout = new javax.swing.GroupLayout(jPanelAdminControl);
        jPanelAdminControl.setLayout(jPanelAdminControlLayout);
        jPanelAdminControlLayout.setHorizontalGroup(
            jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                        .addComponent(jLabelPlantTable, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonResetTable, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jButtonSortByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSortPlantId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
            .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                        .addComponent(jScrollPanePlantTable, javax.swing.GroupLayout.PREFERRED_SIZE, 1180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 267, Short.MAX_VALUE))
                    .addComponent(jPanelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelAdminControlLayout.setVerticalGroup(
            jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelPlantTable)
                        .addComponent(jButtonResetTable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSortByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSortPlantId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                        .addComponent(jTextFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAdminControlLayout.createSequentialGroup()
                        .addComponent(jComboBoxSortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPanePlantTable, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelData, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(215, 215, 215))
        );

        jTabbedPaneAdmin.addTab("Admin Control", jPanelAdminControl);

        jPanelAboutUs.setLayout(null);

        jLabelOurMissionAboutUs.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelOurMissionAboutUs.setForeground(java.awt.Color.white);
        jLabelOurMissionAboutUs.setText("Our Mission");
        jPanelAboutUs.add(jLabelOurMissionAboutUs);
        jLabelOurMissionAboutUs.setBounds(570, 321, 140, 30);

        jLabelControlAboutUs.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelControlAboutUs.setForeground(java.awt.Color.white);
        jLabelControlAboutUs.setText("Control  Data");
        jPanelAboutUs.add(jLabelControlAboutUs);
        jLabelControlAboutUs.setBounds(900, 440, 170, 21);

        jLabelTrackGrowthAboutUs.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelTrackGrowthAboutUs.setForeground(java.awt.Color.white);
        jLabelTrackGrowthAboutUs.setText("Track growth");
        jPanelAboutUs.add(jLabelTrackGrowthAboutUs);
        jLabelTrackGrowthAboutUs.setBounds(240, 440, 140, 21);

        jLabelSortSearchAboutUs.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelSortSearchAboutUs.setForeground(java.awt.Color.white);
        jLabelSortSearchAboutUs.setText("Sort and Search");
        jPanelAboutUs.add(jLabelSortSearchAboutUs);
        jLabelSortSearchAboutUs.setBounds(460, 440, 170, 21);

        jLabelControlManageAboutUs.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelControlManageAboutUs.setForeground(java.awt.Color.white);
        jLabelControlManageAboutUs.setText(" Control & Manage");
        jPanelAboutUs.add(jLabelControlManageAboutUs);
        jLabelControlManageAboutUs.setBounds(670, 440, 190, 21);

        jLabelImageAboutUs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/Untitled design (6).png"))); // NOI18N
        jLabelImageAboutUs.setText("jLabel17");
        jPanelAboutUs.add(jLabelImageAboutUs);
        jLabelImageAboutUs.setBounds(0, 0, 1260, 490);

        jTabbedPaneAdmin.addTab("About Us", jPanelAboutUs);

        jPanelFeedbackForm.setBackground(new java.awt.Color(163, 182, 139));

        jLabelFeedbackFormTitle.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabelFeedbackFormTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFeedbackFormTitle.setText("Feedback Form");

        jTextFieldUsernameFeedback.setToolTipText("");

        jTextAreaMessageFeedback.setColumns(20);
        jTextAreaMessageFeedback.setRows(5);
        jScrollPaneMessageFeedback.setViewportView(jTextAreaMessageFeedback);

        jLabelUsernameFeedBack.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabelUsernameFeedBack.setForeground(new java.awt.Color(255, 255, 255));
        jLabelUsernameFeedBack.setText("Username");

        jLabelFeedbackMessage.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabelFeedbackMessage.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFeedbackMessage.setText("Message");

        jLabelImageFeedback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/image-removebg-preview (2).png"))); // NOI18N

        jLabelUsernameError.setForeground(new java.awt.Color(204, 51, 0));

        jButtonSendFeedback.setBackground(new java.awt.Color(163, 182, 139));
        jButtonSendFeedback.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jButtonSendFeedback.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSendFeedback.setText("Send");
        jButtonSendFeedback.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jButtonSendFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendFeedbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFeedbackFormLayout = new javax.swing.GroupLayout(jPanelFeedbackForm);
        jPanelFeedbackForm.setLayout(jPanelFeedbackFormLayout);
        jPanelFeedbackFormLayout.setHorizontalGroup(
            jPanelFeedbackFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                .addComponent(jLabelImageFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelFeedbackFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabelFeedbackFormTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(jPanelFeedbackFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldUsernameFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelUsernameFeedBack)
                            .addComponent(jScrollPaneMessageFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFeedbackMessage)
                            .addComponent(jLabelUsernameError, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(jButtonSendFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(402, Short.MAX_VALUE))
        );
        jPanelFeedbackFormLayout.setVerticalGroup(
            jPanelFeedbackFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                .addGroup(jPanelFeedbackFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabelFeedbackFormTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelUsernameFeedBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldUsernameFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelUsernameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabelFeedbackMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneMessageFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSendFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelFeedbackFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelImageFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        jTabbedPaneAdmin.addTab("Contact Us", jPanelFeedbackForm);

        jpnlMainScreen.add(jTabbedPaneAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 93, -1, -1));

        btnlogout.setBackground(new java.awt.Color(163, 182, 139));
        btnlogout.setForeground(new java.awt.Color(102, 102, 102));
        btnlogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/logout12-removebg-preview.png"))); // NOI18N
        btnlogout.setBorder(null);
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });
        jpnlMainScreen.add(btnlogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 30, -1, -1));

        jLabelImageMainBarMainPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/mainbar.png"))); // NOI18N
        jpnlMainScreen.add(jLabelImageMainBarMainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 100));

        jLabelPlantTableTitle.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(132, 149, 115));
        setUndecorated(true);
        setResizable(false);

        jpnlMainloadingScreen.setBackground(new java.awt.Color(255, 255, 255));
        jpnlMainloadingScreen.setForeground(new java.awt.Color(242, 242, 242));
        jpnlMainloadingScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelCopywrite.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelCopywrite.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCopywrite.setText("© Bagacha 2024");
        jpnlMainloadingScreen.add(jLabelCopywrite, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 560, 180, 40));

        jProgressBarLoadingScreen.setBackground(new java.awt.Color(0, 102, 0));
        jProgressBarLoadingScreen.setForeground(new java.awt.Color(204, 0, 51));
        jProgressBarLoadingScreen.setToolTipText("0");
        jProgressBarLoadingScreen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jProgressBarLoadingScreen.setFocusTraversalPolicyProvider(true);
        jpnlMainloadingScreen.add(jProgressBarLoadingScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 480, 273, 28));

        jLabelPleaseWait.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPleaseWait.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPleaseWait.setText("Please wait ");
        jpnlMainloadingScreen.add(jLabelPleaseWait, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 500, 166, 50));

        jLabelLoadingScreenPicture.setBackground(new java.awt.Color(204, 255, 204));
        jLabelLoadingScreenPicture.setForeground(new java.awt.Color(204, 255, 204));
        jLabelLoadingScreenPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/plantmanagement/resources/Bagaicha (2).gif"))); // NOI18N
        jLabelLoadingScreenPicture.setText(" © Bagaicha 2024");
        jpnlMainloadingScreen.add(jLabelLoadingScreenPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, -80, 1330, 760));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpnlMainloadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnlMainloadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1248, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
// Method to initialize data, including plant list and table
// Method to add Plant data to the table and update the table

    /**
     * Registers a new plant into the system This method adds the given
     * PlantModel instance to the plantList and updates the JTable
     *
     * @param plant the PlantModel object containing plant details to be added.
     */
    private void registerPlant(PlantModel plant) {
        //Add Plant to the list
        plantList.add(plant);
        //Get the table Model
        DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();
        //Add new row to the table with plant details
        model.addRow(new Object[]{
            plant.getPlantId(), plant.getPlantName(), plant.getPlantCategory(), plant.getGrowthStage(), plant.getPlantBloomSeason(), plant.getStockQuantity(), plant.getAddedDate(), plant.getPrice()
        });
    }

    //Method to initialize the plant dta for the table(preloading with 5 sample data )
    /**
     * Initialize the plant data for the PlantManagement system PreLoads the
     * system with five sample PlantModel objects and loads the table
     */
    private void initializeData() {
        //Initialize the plant List
        plantList = new LinkedList();
        //Add sample plant to the list
        registerPlant(new PlantModel(1234577, "Jasmine", "Outdoor", "Flowering", "Summer", 20, 100.00, "2024-11-23"));
        registerPlant(new PlantModel(1234567, "Aloe Vera", "Indoor", "Sprouting", "Year Round", 15, 110.00, "2024-11-24"));
        registerPlant(new PlantModel(1234578, "Snake Plant", "Indoor", "Budding", "Autumn", 10, 120.00, "2024-11-25"));
        registerPlant(new PlantModel(1234569, "Marigold", "Outdoor", "Sprouting", "Winter", 5, 130.00, "2024-11-26"));
        registerPlant(new PlantModel(1234570, "Rose", "Outdoor", "Flowering", "Spring", 11, 150.00, "2024-11-27"));
        //update the total sales and stock displays
        totalSales();
        totalStock();
    }

    /**
     * Loads the provided list of plants into the JTable. Clears existing rows
     * in the table model before adding new rows.
     *
     * @param plantList the list of PlantModel objects to be displayed in the
     * table.
     */
    private void loadListToTable(List<PlantModel> plantList) {
        //Get the table model
        DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();
        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with plant data
        plantList.forEach(plant -> model.addRow(new Object[]{
            plant.getPlantId(),
            plant.getPlantName(),
            plant.getPlantCategory(),
            plant.getGrowthStage(),
            plant.getPlantBloomSeason(),
            plant.getStockQuantity(),
            plant.getAddedDate(),
            plant.getPrice()
        }));
    }
//Action performed method for the login button

    /**
     * Handles the login button action event.
     *
     * @param evt The ActionEvent triggered when the login button is clicked.
     */

    private void btnloginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnloginActionPerformed

        System.out.println("Login Button Clicked");// check if the button works
        String username = jTxtFieldUsername.getText();// retrives the username from the textfield
        // Retrieve the password entered in the password field as a character array,
        // then convert it to a String for comparison
        String password = new String(jPasswordFieldPassword.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            //display an error message to inform user to fill in all fields
            jlabelLoginError.setText("Please enter your username and password.");
        } // Validate the credentials  and if error display an error message
        else if (!username.equals("admin") || !password.equals("admin")) {
            //Display an error message for incorrect credentials
            jlabelLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            jlabelLoginError.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnloginActionPerformed

//action performed for the ters and conditions checkbox
    /**
     *  Action performed for the "Show Password" checkbox.
     * @param evt the action event triggered when the checkbox is clicked.
     */
    private void jCheckBoxShowPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowPasswordActionPerformed
        // Check the visibility of password based on the checkbox state
        if (jCheckBoxShowPassword.isSelected())
            jPasswordFieldPassword.setEchoChar((char) 0);// show password characters
        else
            jPasswordFieldPassword.setEchoChar('*'); // Mask the password 
    }//GEN-LAST:event_jCheckBoxShowPasswordActionPerformed
//Action Performed for adding a new plant to the list
    /**
 * Action performed for adding a new plant to the list.
 * 
 * @param evt the action event triggered when the "Add Plant" button is clicked.
 */
    private void jbtnAddPlantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddPlantActionPerformed
        //Reset the table view to remove any filteration in table
        resetTable();
        // Add plant after add new plant button is clicked
        boolean isValid = true;//initialize isvValid
        //Retrieve data from the Jtextfields
        String plantId = jTextFieldPlantId.getText().trim();// Get plant ID
        String name = jTextFieldPlantName.getText().trim();// Get plant name
        String category = String.valueOf(jComboBoxPlantCategory.getSelectedItem());// Get category 
        String growthStatus = String.valueOf(jComboBoxPlantGrowthStatus.getSelectedItem());// Get growth status
        String plantBloomSeason = String.valueOf(jComboBoxPlantBloomSeason.getSelectedItem());// Get blooming season
        String stockQuantity = jTextFieldStockQuantity.getText().trim();// Get stock quantity
        String priceText = jTextFieldPlantPrice.getText().trim();// Get price
        // Check for empty fields
        if (ValidationUtil.isNullOrEmpty(plantId)
                || ValidationUtil.isNullOrEmpty(name)
                || ValidationUtil.isNullOrEmpty(category)
                || ValidationUtil.isNullOrEmpty(plantBloomSeason)
                || ValidationUtil.isNullOrEmpty(stockQuantity)
                || ValidationUtil.isNullOrEmpty(priceText)) {
             //shows an error message when fileds are empty
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate specific fields using ValidationUtil
        //Validation for plantName 
        isValid &= validateField(
                jTextFieldPlantName, "Plant Name", lblErrorMsgPlantName, "Must be aplhabetic .",
                errorColor, yellowColor, ValidationUtil.isValidName(jTextFieldPlantName.getText())
        );

        //Validation for plant category 
        if (!ValidationUtil.isValidPlantCategory(category)) {
            JOptionPane.showMessageDialog(this, "Invalid category. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Validation for plant GrowthStatus
        if (!ValidationUtil.isValidGrowthStatus(growthStatus)) {
            JOptionPane.showMessageDialog(this, "Invalid growth Status. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Validation for plant Blooming Season
        if (!ValidationUtil.isValidPlantBloomSeason(plantBloomSeason)) {
            JOptionPane.showMessageDialog(this, "Invalid Blooming Season. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate price
        double price = 0.0; // Declare and initialize price outside the try block
        try {
            price = Double.parseDouble(priceText);//parse price
            // Check if price is valid
            isValid &= validateField(
                    jTextFieldPlantPrice, "Price", lblErrorMsgPlantPrice, "Must be  a positive number.",
                    errorColor, yellowColor, ValidationUtil.isValidPrice(price)
            );
            // checking number formatexception
        } catch (NumberFormatException e) {
            //Handle invalid price input
            validateField(jTextFieldPlantPrice, "Price", lblErrorMsgPlantPrice, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }

        // Validate plant ID
        int plantIdInt = 0;
        try {
            plantIdInt = Integer.parseInt(plantId); //Parse plant ID text to an integer
            isValid &= validateField(
                    jTextFieldPlantId, "Plant Id", lblErrorMsgPlantId, "Must be exactly 7 digits.",
                    errorColor, yellowColor, ValidationUtil.isValidPlantId(plantIdInt)
            );

        } catch (NumberFormatException e) {
            // Handle invalid plant ID input
            validateField(jTextFieldPlantId, "Plant Id", lblErrorMsgPlantId, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;

        }

        // Validate stock quantity
        int stockQuantityInt = 0;
        try {
            stockQuantityInt = Integer.parseInt(stockQuantity);// parse stock quantity to an integer
            isValid &= validateField(
                     // Handle invalid stock quantity input
                    jTextFieldStockQuantity, "Plant Stock Quantity", lblErrorMsgStockQuantity, "Must be between a positive number.",
                    errorColor, yellowColor, ValidationUtil.isValidStockQuantity(stockQuantityInt)
            );

        } catch (NumberFormatException e) {
            validateField(jTextFieldStockQuantity, "Plant Stock Quantity", lblErrorMsgStockQuantity, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }
        // Check for duplicate Plant ID in the plant list
        for (PlantModel plant : plantList) {
            if (plant.getPlantId() == plantIdInt) {
                // Show error if duplicate found
                JOptionPane.showMessageDialog(this, "Plant ID already exists. Please use a unique ID.", "Duplicate Plant ID", JOptionPane.ERROR_MESSAGE);
                return; // Stop further processing
            }
        }
        //validation Plant date when adding the plant to the table
        if (isValid) {
            // Get the current date automatically (using LocalDate)
            String addedDate = LocalDate.now().toString(); // Format: yyyy-MM-dd
            // Create a new PlantModel object
            PlantModel plant = new PlantModel(Integer.parseInt(plantId), name, category, growthStatus, plantBloomSeason,
                    stockQuantityInt, price, addedDate);

            //Get the model of the table 
            DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();
            // Loop through all the rows in the table model
            // Check if the plantId already exists in the plantList (similar to table check)

            // Add the plant to the plantList
            plantList.add(plant);
            // If all validations pass, add student data to the table
            model.addRow(new Object[]{plantId, name, category, growthStatus, plantBloomSeason, stockQuantity, addedDate, price});
            JOptionPane.showMessageDialog(this, "Plant added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            //  clear input fields
            jTextFieldPlantId.setText("");
            jTextFieldPlantName.setText("");
            jTextFieldStockQuantity.setText("");
            jTextFieldPlantPrice.setText("");
            jComboBoxPlantCategory.setSelectedIndex(0);
            jComboBoxPlantGrowthStatus.setSelectedIndex(0);
            jComboBoxPlantBloomSeason.setSelectedIndex(0);
            // Update total sales and stock data
            totalSales();
            totalStock();
            resetTable(); // Ensure the table is reset before adding
        }


    }//GEN-LAST:event_jbtnAddPlantActionPerformed
/**
 * Action performed when the "Update" button is clicked.
 * 
 * @param evt the action event triggered when the button is clicked.
 */
    private void jbtnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnupdateActionPerformed
        // Reset all fields and error labels
        resetField(jTextFieldPlantId, lblErrorMsgPlantId, "Plant ID");
        resetField(jTextFieldPlantName, lblErrorMsgPlantName, "Plant Name");
        resetField(jTextFieldStockQuantity, lblErrorMsgStockQuantity, "Stock Quantity");
        resetField(jTextFieldPlantPrice, lblErrorMsgPlantPrice, "Price");
        // Reset the table to clear any previous data
        resetTable();
        // Retrieve plant data from textfields
        boolean isValid = true;
        String plantId = jTextFieldPlantId.getText().trim();
        String name = jTextFieldPlantName.getText().trim();
        String category = String.valueOf(jComboBoxPlantCategory.getSelectedItem());
        String growthStatus = String.valueOf(jComboBoxPlantGrowthStatus.getSelectedItem());
        String plantBloomSeason = String.valueOf(jComboBoxPlantBloomSeason.getSelectedItem());
        String stockQuantity = jTextFieldStockQuantity.getText().trim();
        String priceText = jTextFieldPlantPrice.getText().trim();

        // Check for empty fields
        if (ValidationUtil.isNullOrEmpty(plantId)
                || ValidationUtil.isNullOrEmpty(name)
                || ValidationUtil.isNullOrEmpty(category)
                || ValidationUtil.isNullOrEmpty(plantBloomSeason)
                || ValidationUtil.isNullOrEmpty(stockQuantity)
                || ValidationUtil.isNullOrEmpty(priceText)) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields or choose a row in table to update.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate fields one by one
        //validate plantName
        isValid &= validateField(jTextFieldPlantName, "Plant Name", lblErrorMsgPlantName, "Must be alphabetic.", errorColor, yellowColor, ValidationUtil.isValidName(name));
        //validate plant Category
        if (!ValidationUtil.isValidPlantCategory(category)) {
            JOptionPane.showMessageDialog(this, "Invalid category. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
         //validate growth status
        if (!ValidationUtil.isValidGrowthStatus(growthStatus)) {
            JOptionPane.showMessageDialog(this, "Invalid growth status. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Validate bloom season
        if (!ValidationUtil.isValidPlantBloomSeason(plantBloomSeason)) {
            JOptionPane.showMessageDialog(this, "Invalid blooming season. Choose a valid option.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate price
        double price = 0.0;
        try {
            price = Double.parseDouble(priceText);//parse price into integer
            isValid &= validateField(jTextFieldPlantPrice, "Price", lblErrorMsgPlantPrice, "Must be a positive number.", errorColor, yellowColor, ValidationUtil.isValidPrice(price));
        } catch (NumberFormatException e) {
            validateField(jTextFieldPlantPrice, "Price", lblErrorMsgPlantPrice, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }

        // Validate plant ID
        int plantIdInt = 0;
        try {
            plantIdInt = Integer.parseInt(plantId);//parse plant id  into integer
            isValid &= validateField(jTextFieldPlantId, "Plant ID", lblErrorMsgPlantId, "Must be exactly 7 digits.", errorColor, yellowColor, ValidationUtil.isValidPlantId(plantIdInt));
        } catch (NumberFormatException e) {
            validateField(jTextFieldPlantId, "Plant ID", lblErrorMsgPlantId, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }

        // Validate stock quantity
        int stockQuantityInt = 0;
        try {
            stockQuantityInt = Integer.parseInt(stockQuantity);//parse stock quantity into integer
            isValid &= validateField(jTextFieldStockQuantity, "Plant Stock Quantity", lblErrorMsgStockQuantity, "Must be a positive number.", errorColor, yellowColor, ValidationUtil.isValidStockQuantity(stockQuantityInt));
        } catch (NumberFormatException e) {
            validateField(jTextFieldStockQuantity, "Plant Stock Quantity", lblErrorMsgStockQuantity, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }

        // If validation fails, do not proceed
        if (!isValid) {
            JOptionPane.showMessageDialog(this, "Please correct the errors and try again.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the Plant ID exists in the table
        DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();
        boolean found = false;
        int selectedRow = jTablePlant.getSelectedRow();

       // Confirm whether the user wants to update the plant data
        int choice = JOptionPane.showConfirmDialog(null, "Do you really want to update?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {

            // Check if the Plant ID exists in the plantList
            boolean existsInPlantList = false;
            PlantModel plantToUpdate = null;

            for (PlantModel plant : plantList) {
                if (plant.getPlantId() == plantIdInt) {
                    existsInPlantList = true;
                    plantToUpdate = plant; // Keep reference for deletion
                    break;
                }
            }
            if (!existsInPlantList) {
                JOptionPane.showMessageDialog(this, "Plant ID not found in the records. Cannot update.", "Delete Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get the current date (in case you want to update the date of modification)
            String modifiedDate = LocalDate.now().toString(); // Format: yyyy-MM-dd

            // Find and update the plant in the plantList
            for (int i = 0; i < plantList.size(); i++) {
                PlantModel plant = plantList.get(i);
                if (plant.getPlantId() == Integer.parseInt(plantId)) {
                    // Update the plant data in the list
                    plant.setPlantName(name);
                    plant.setPlantCategory(category);
                    plant.setGrowthStage(growthStatus);
                    plant.setPlantBloomSeason(plantBloomSeason);
                    plant.setStockQuantity(stockQuantityInt);
                    plant.setPrice(price);
                    plant.setAddedDate(modifiedDate);

                    // Update the table as well
                    for (int row = 0; row < model.getRowCount(); row++) {
                        if (model.getValueAt(row, 0).toString().equals(plantId)) {
                            model.setValueAt(name, row, 1);
                            model.setValueAt(category, row, 2);
                            model.setValueAt(growthStatus, row, 3);
                            model.setValueAt(plantBloomSeason, row, 4);
                            model.setValueAt(stockQuantity, row, 5);
                            model.setValueAt(modifiedDate, row, 6);
                            model.setValueAt(price, row, 7);
                            break;
                        }
                    }

                    // Success message
                    JOptionPane.showMessageDialog(this, "Plant record updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                    totalSales();// Update total sales data
                    totalStock();// Update total stock data
                    resetTable(); // Ensure the table is reset 
                }

            }
            // Clear input fields
            jTextFieldPlantId.setText("");
            jTextFieldPlantName.setText("");
            jTextFieldStockQuantity.setText("");
            jTextFieldPlantPrice.setText("");
            jComboBoxPlantCategory.setSelectedIndex(0);
            jComboBoxPlantGrowthStatus.setSelectedIndex(0);
            jComboBoxPlantBloomSeason.setSelectedIndex(0);
        }

    }//GEN-LAST:event_jbtnupdateActionPerformed
/**
 * Handles mouse click on the update button for double-click functionality.
 * If a row in the table is double-clicked, its data is loaded into the input fields for updating.
 * 
 * @param evt the mouse event triggered by the user double-clicking the row.
 */
    private void jbtnupdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnupdateMouseClicked
        // Handle mouse click on update for double click 
        if (evt.getClickCount() == 2) {  // Check if the click count is 2 (double-click)
            int selectedRow = jTablePlant.getSelectedRow();// Get the selected row in the table
            if (selectedRow != -1) {// Ensure a row is selected
                // Load data from the selected row into the text fields
                jTextFieldPlantId.setText(jTablePlant.getValueAt(selectedRow, 0).toString());
                jTextFieldPlantName.setText(jTablePlant.getValueAt(selectedRow, 1).toString());
                jComboBoxPlantCategory.setSelectedItem(jTablePlant.getValueAt(selectedRow, 2).toString());
                jComboBoxPlantGrowthStatus.setSelectedItem(jTablePlant.getValueAt(selectedRow, 3).toString());
                jComboBoxPlantBloomSeason.setSelectedItem(jTablePlant.getValueAt(selectedRow, 4).toString());
                jTextFieldStockQuantity.setText(jTablePlant.getValueAt(selectedRow, 5).toString());
                jTextFieldPlantPrice.setText(jTablePlant.getValueAt(selectedRow, 7).toString());
            }
        }


    }//GEN-LAST:event_jbtnupdateMouseClicked
/**
 * Action performed when the clear button is clicked.
 * Resets all fields, combo boxes, and error labels to their default values.
 * 
 * @param evt the action event triggered by the "Clear" button click.
 */
    private void jbtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearActionPerformed
        resetTable();// Reset the table to clear any selections
        // Show a confirmation dialog before clearing all fields
        int choice = JOptionPane.showConfirmDialog(null, "Do you really want to update?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            // Clear all text fields
            jTextFieldPlantId.setText("");
            jTextFieldPlantName.setText("");
            jTextFieldStockQuantity.setText("");
            jTextFieldPlantPrice.setText("");

            // Reset combo boxes to the first option (or default)
            jComboBoxPlantCategory.setSelectedIndex(0);
            jComboBoxPlantGrowthStatus.setSelectedIndex(0);
            jComboBoxPlantBloomSeason.setSelectedIndex(0);

            // Reset borders and error labels to default style
            resetField(jTextFieldPlantId, lblErrorMsgPlantId, "Plant ID");
            resetField(jTextFieldPlantName, lblErrorMsgPlantName, "Plant Name");
            resetField(jTextFieldStockQuantity, lblErrorMsgStockQuantity, "Stock Quantity");
            resetField(jTextFieldPlantPrice, lblErrorMsgPlantPrice, "Price");
        }

    }//GEN-LAST:event_jbtnClearActionPerformed
    /**
 * Resets the appearance of a text field and hides its associated error label.
 * 
 * @param textField the text field to reset
 * @param errorLbl the error label associated with the text field
 * @param fieldName the name of the field (used for resetting title or border)
 */
    private void resetField(JTextField textField, JLabel errorLbl, String fieldName) {
        textField.setBorder(createTitledBorder(null, fieldName));  // Reset border to default (null / no color)
        errorLbl.setVisible(false);  // Hide error label
    }
    /**
     * Action performed when the delete button is clicked
     * @param evt handles he process of deleting a plant data
     */
    private void jbtndDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtndDeleteActionPerformed

        // Reset all fields and error labels
        resetField(jTextFieldPlantId, lblErrorMsgPlantId, "Plant ID");
        resetField(jTextFieldPlantName, lblErrorMsgPlantName, "Plant Name");
        resetField(jTextFieldStockQuantity, lblErrorMsgStockQuantity, "Stock Quantity");
        resetField(jTextFieldPlantPrice, lblErrorMsgPlantPrice, "Price");
        resetTable();// Clear the displayed table data

        // Retrieve plant data from jtextfield
        boolean isValid = true;
        // Get the Plant ID from the text field
        String plantId = jTextFieldPlantId.getText().trim();

        // Validate that the Plant ID is not empty
        if (ValidationUtil.isNullOrEmpty(plantId)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid Plant ID or select a row to delete.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validate plant ID
        int plantIdInt = 0;
        try {
            plantIdInt = Integer.parseInt(plantId);// parse Plant ID to integer
            isValid &= validateField(jTextFieldPlantId, "Plant ID", lblErrorMsgPlantId, "Must be exactly 7 digits.", errorColor, yellowColor, ValidationUtil.isValidPlantId(plantIdInt));
        } catch (NumberFormatException e) {
            validateField(jTextFieldPlantId, "Plant ID", lblErrorMsgPlantId, "Must be a valid number.", errorColor, yellowColor, false);
            isValid = false;
        }

        // Check if the Plant ID exists in the table
        DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();
        // Check if the Plant ID exists in the plantList
        boolean existsInPlantList = false;
        PlantModel plantToDelete = null;
// Search through the plant list to find the matching Plant ID
        for (PlantModel plant : plantList) {
            if (plant.getPlantId() == plantIdInt) {
                existsInPlantList = true;
                plantToDelete = plant; // Keep reference for deletion
                break;
            }
        }
  // If Plant ID is not found in the list, show an error
        if (!existsInPlantList) {
            JOptionPane.showMessageDialog(this, "Plant ID not found in the records. Cannot delete.", "Delete Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Show confirmation dialog before proceeding with deletion
        int choice = JOptionPane.showConfirmDialog(null, "Do you really want to delete?", "Confirmation", JOptionPane.YES_NO_OPTION);
        // confirm panel for deleting data 
        if (choice == JOptionPane.YES_OPTION) {
            //  delete the row
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).toString().equals(plantId)) {
                    // Remove the row with the matching plant ID
                    model.removeRow(i);
                    break;
                }
            }
            // Now, delete the plant from the plantList
            for (PlantModel plant : plantList) {
                if (String.valueOf(plant.getPlantId()).equals(plantId)) {
                    plantList.remove(plant); // Remove the plant from the list
                    break;
                }
            }
            // Show success message after deletion
            JOptionPane.showMessageDialog(this, "Plant record deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear the input fields after deletion
            jTextFieldPlantId.setText("");
            jTextFieldPlantName.setText("");
            jTextFieldStockQuantity.setText("");
            jTextFieldPlantPrice.setText("");
            jComboBoxPlantCategory.setSelectedIndex(0);
            jComboBoxPlantGrowthStatus.setSelectedIndex(0);
            jComboBoxPlantBloomSeason.setSelectedIndex(0);
            // Update the total sales and stock values
            totalSales();
            totalStock();
            resetTable(); // Ensure the table is reset
        }
    }//GEN-LAST:event_jbtndDeleteActionPerformed
/**
 * Action performed when the mouse is clicked on the plant table.
 * @param evt  handles the updating of input fields when a row is double-clicked in the table.
 */
    private void jTablePlantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePlantMouseClicked
        // Handle mouse click on update for double click 
        if (evt.getClickCount() == 2) {
            int selectedRow = jTablePlant.getSelectedRow();
            if (selectedRow != -1) {
                // Load data from the selected row into the text fields
                jTextFieldPlantId.setText(jTablePlant.getValueAt(selectedRow, 0).toString());
                jTextFieldPlantName.setText(jTablePlant.getValueAt(selectedRow, 1).toString());
                jComboBoxPlantCategory.setSelectedItem(jTablePlant.getValueAt(selectedRow, 2).toString());
                jComboBoxPlantGrowthStatus.setSelectedItem(jTablePlant.getValueAt(selectedRow, 3).toString());
                jComboBoxPlantBloomSeason.setSelectedItem(jTablePlant.getValueAt(selectedRow, 4).toString());
                jTextFieldStockQuantity.setText(jTablePlant.getValueAt(selectedRow, 5).toString());
                jTextFieldPlantPrice.setText(jTablePlant.getValueAt(selectedRow, 7).toString());
            }
        }


    }//GEN-LAST:event_jTablePlantMouseClicked

//action performed when sendFeedback button is performed
    /**
     * Action performed when the Send Feedback button is clicked
     * @param evt  handles the process of validating the feedback submission
     */
    private void jButtonSendFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendFeedbackActionPerformed

        // Get the username and password input
        System.out.println("Button Clicked");
        String username = jTextFieldUsernameFeedback.getText();

        // Check if username or password is empty
        if (username.isEmpty()) {
            jLabelUsernameError.setText("Please enter your username.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin")) {
            jLabelUsernameError.setText("Username not found.");
        } // If credentials are correct
        else {
            jLabelUsernameError.setText(""); // Clear any previous error messages
            JOptionPane.showMessageDialog(this, "Thank you for your feedback!", "Success", JOptionPane.INFORMATION_MESSAGE);
            jTextFieldUsernameFeedback.setText(""); // Clear Username jTextField
            jTextAreaMessageFeedback.setText("");// Clear Message jTextField
        }
    }//GEN-LAST:event_jButtonSendFeedbackActionPerformed
/**
 *  Action performed when the "Manage Plant Home" button is clicked
 * @param evt  handles switching from homepage top the admin control page
 */
    private void jButtonManagePlantHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManagePlantHomeActionPerformed
        // Action handling when manage plant button clicked switch to admin panel
        try {
            // Set the selected tab to "Admin Dashboard" using the panel
            jTabbedPaneAdmin.setSelectedComponent(jPanelAdminControl); // Ensure pnlAdminDashboard is correctly initialized and added to the tabbed pane
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: Admin Dashboard panel not found in tabbed pane.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonManagePlantHomeActionPerformed
//Action performed for logout button
    /**
     * Action performed for the "Logout" button
     * @param evt handles logout confirmation from mainPanel  to LogIn Page
     */
    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlogoutActionPerformed
// Confirm Logout action with a dialog
        int choice = JOptionPane.showConfirmDialog(null, "Do you want to logout?",
                "Confirmation", JOptionPane.YES_NO_OPTION);

        // Check the user's choice
        if (choice == JOptionPane.YES_OPTION) {
            // If the user chose 'Yes',
            jPasswordFieldPassword.setText("");//clear password
            jTxtFieldUsername.setText("");//clear username

            loadScreen("LoginScreen"); // Load the main screen after logout
        }
    }//GEN-LAST:event_btnlogoutActionPerformed
/**
 * Action performed when the "Sort by Plant ID" button is clicked
 * @param evt handles sorting of plant data based on PlantId on ascending and descending
 */
    private void jButtonSortPlantIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortPlantIdActionPerformed
        // Prints if the button was clicked
        System.out.println("Sort Button Clicked");
        // Get the selected sort order from the combo box
        String selectedOrder = (String) jComboBoxSortOrder.getSelectedItem();
        // Declare a variable for sorted list
        List<PlantModel> sortedList;

       // Check the selected order and sort accordingly
        if (selectedOrder.equals("Ascending")) {
            sortedList = selectionSort.sortByPlantId(plantList, false); // Ascending order
        } else if (selectedOrder.equals("Descending")) {
            sortedList = selectionSort.sortByPlantId(plantList, true); // Descending order
        } else {
            // Handle the case where no valid option is selected (if needed)
            return;
        }

        loadListToTable(sortedList);
    }//GEN-LAST:event_jButtonSortPlantIdActionPerformed
/**
 * Action performed when the Search button is clicked
 * @param evt handles binary search by sorting the PlantName first then searches
 */
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
          // Get the search input from the search bar
        String searchName = jTextFieldSearchBar.getText();
        jLabelSearch.setText(""); // Clear the previous error message

        // Check if the input is empty
        if (ValidationUtil.isNullOrEmpty(searchName)) {
            jLabelSearch.setText("Please enter a Plant Name to search.");
            return;
        }

        //  Ensure the plant list is sorted (ascending order)
        MergeSort mergeSort = new MergeSort();
        List<PlantModel> sortedPlantList = mergeSort.mergeSortByPlantName(plantList, false);

        // Perform binary search on the sorted list
        BinarySearch binarySearch = new BinarySearch();
        PlantModel foundPlant = binarySearch.searchByPlantName(searchName, sortedPlantList, 0, sortedPlantList.size() - 1);

        //  Display the search result
        if (foundPlant != null) {
            // If the plant is found, show it in the table
            List<PlantModel> resultList = new ArrayList<>();
            resultList.add(foundPlant);
            loadListToTable(resultList); // Load the result list into the table
        } else {
            // If no plant is found with the entered name
            jLabelSearch.setText("No plant found with Name: " + searchName);
            jLabelSearch.setVisible(true); // Show the error message label
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed
/**
 * Action performed when the Sort by Name button is clicked
 * @param evt handles sorting of Plant data by PlantName based on ascending or descending
 */
    private void jButtonSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortByNameActionPerformed
        //Prints if teh button was clicked
        System.out.println("Sort By Name Button Clicked");
// Get the selected sort order from the combo box
        String selectedOrder = (String) jComboBoxSortOrder.getSelectedItem();
         // Declare a variable for the sorted list
        List<PlantModel> sortedList;
// Check the selected sort order and perform sorting accordingly
        if (selectedOrder.equals("Ascending")) {
            // Sort the list by plant name in ascending order
            sortedList = mergeSort.mergeSortByPlantName(plantList, false); // Ascending
        } else if (selectedOrder.equals("Descending")) {
            // Sort the list by plant name in descending order
            sortedList = mergeSort.mergeSortByPlantName(plantList, true); // Descending
        } else {
            return; // exit if  invalid selection
        }
        // Load the sorted list to the table
        loadListToTable(sortedList);

    }//GEN-LAST:event_jButtonSortByNameActionPerformed
/**
 * Action performed when the "Sort by Price" button is clicked
 * @param evt handles sorting of Plant data by PlantPrice based on ascending or descending
 */
    private void jButtonSortByPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortByPriceActionPerformed
        // Prints if the button was clicked
        System.out.println("Sort By Price Button Clicked");

        // Get the selected sort order from the dropdown
        String selectedOrder = (String) jComboBoxSortOrder.getSelectedItem();

        // Validate selection
        if (selectedOrder == null) {
            JOptionPane.showMessageDialog(this, "Please select a valid sort order.", "Invalid Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Perform sorting based on the selected order
        List<PlantModel> sortedList;
        if (selectedOrder.equals("Ascending")) {
         //sorts the list by price in ascending order    
            sortedList = InsertionSort.sortByPrice(plantList, false); // Ascending order
        } else if (selectedOrder.equals("Descending")) {
            //sorts the list by price in ascending order  
            sortedList = InsertionSort.sortByPrice(plantList, true); // Descending order
        } else {
            JOptionPane.showMessageDialog(this, "Invalid sort order selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Reload the sorted list into the table
        loadListToTable(sortedList);
    }//GEN-LAST:event_jButtonSortByPriceActionPerformed
/**
 * // Action performed when the "Reset Table" button is clicked
 * @param evt handles resetting the table modified by sorting or searching
 */
    private void jButtonResetTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetTableActionPerformed
        // Get the model of the table
        resetTable(); // Ensure the table is reset
        jLabelSearch.setText(" ");//ensure searchLabel is reset
        jTextFieldSearchBar.setText("");//ensure searchbar is reset
    }//GEN-LAST:event_jButtonResetTableActionPerformed

 
    /**
     *  Method to reset the table with the data from plantList
     */
    private void resetTable() {
        // Get the model of the table
        DefaultTableModel model = (DefaultTableModel) jTablePlant.getModel();

        // Clear the table
        model.setRowCount(0);

        // Repopulate the table with the data from plantList
        for (PlantModel plant : plantList) {
            model.addRow(new Object[]{
                plant.getPlantId(),
                plant.getPlantName(),
                plant.getPlantCategory(),
                plant.getGrowthStage(),
                plant.getPlantBloomSeason(),
                plant.getStockQuantity(),
                plant.getAddedDate(),
                plant.getPrice()
            });
        }
    }

/**
 * Initalize the layout for the application
 */
    private void initializeLayout() {
        // Create a CardLayout to manage different screens (panels)
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers for each scrren
        getContentPane().add(jpnlMainloadingScreen, "LoadingScreen");
        getContentPane().add(jpnlLoginScreen, "LoginScreen");
        getContentPane().add(jpnlMainScreen, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    // Add a MouseListener to the table to capture row selection
// Method to simulate loading progress
    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            // Simulate the progress bar incrementally
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(40); // Simulated delay for progress bar
                    publish(i);// Update progress
                }
                return null;
            }
// Update progress

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                jProgressBarLoadingScreen.setValue(progress);
            }
// Once the progress is complete, switch to the login screen

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute();// Execute the worker thread

    }

    private void totalSales() {
        double total = 0;
        // Loop through the plant list and calculate the total sales
        for (int i = 0; i < plantList.size(); i++) {
            int stock = plantList.get(i).getStockQuantity();
            double price = plantList.get(i).getPrice();
            total += stock * price;
        }
        // Update the label to display the total sales
        jLabelTotalSalesData.setText("Rs." + String.format("%.2f", total));  // Formatting as currency
        System.out.println("Total Sales: Rs." + String.format("%.2f", total));  // Debug output
    }
// Method to  display appropriate total stock in dashboard

    private void totalStock() {
        int stock = 0;
        // Loop through the plant list and calculate the total stock quantity
        for (int i = 0; i < plantList.size(); i++) {
            stock += plantList.get(i).getStockQuantity();
        }
        // Update the label to display the total stock level
        jLabelTotalStockLevelData.setText(String.valueOf(stock));
        System.out.println("Total Stock: " + stock);  // Debug output
    }
// Method to create a titled border for a JTextField with specified color and title

    /**
     *
     * @param color of the border and title text
     * @param title the text to display as the title of the border
     * @return a TitleBorder object with the specified color settings
     */
    private javax.swing.border.TitledBorder createTitledBorder(Color color, String title) {
        return javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(color, 2),
                title,
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("Segoe UI Bold", 1, 12),
                color
        );
    }
// Method to validate user input in a JTextField and display appropriate error messages

    /**
     * Validates user input in a JTextField and provides visual feedback.
     *
     * @param textField the JTextField to validate
     * @param fieldName the name of the field (used for displaying error
     * messages and borders)
     * @param errorLbl the JLabel to display the error message
     * @param errorMsg the error message to display if validation fails
     * @param errorColor the color to use for the border and title when
     * validation fails
     * @param successColor the color to use for the border and title when
     * validation succeeds
     * @param isValidFormat a Boolean indicating whether the field content
     * matches the expected format
     * @return true if the input is valid, false otherwise
     */
    private boolean validateField(JTextField textField, String fieldName, JLabel errorLbl, String errorMsg, Color errorColor,
            Color successColor, boolean isValidFormat) {
        if (ValidationUtil.isNullOrEmpty(textField.getText())) {
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText("Field cannot be empty!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            textField.setBorder(createTitledBorder(successColor, fieldName));
            errorLbl.setVisible(false);
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    // Method to switch between different screens using CardLayout
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
/**
 * Main method to launch the application
 * This method initializes the application displays the main window
 * @param args handles the transition of the whole system
 */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlantManagementApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlantManagementApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlantManagementApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlantManagementApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        PlantManagementApp app = new PlantManagementApp();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);// Make the main window visible
        });

        app.startProgress(); // Start the loading progress simulation

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnlogin;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton jButtonManagePlantHome;
    private javax.swing.JButton jButtonResetTable;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSendFeedback;
    private javax.swing.JButton jButtonSortByName;
    private javax.swing.JButton jButtonSortByPrice;
    private javax.swing.JButton jButtonSortPlantId;
    private javax.swing.JCheckBox jCheckBoxShowPassword;
    private javax.swing.JComboBox<String> jComboBoxPlantBloomSeason;
    private javax.swing.JComboBox<String> jComboBoxPlantCategory;
    private javax.swing.JComboBox<String> jComboBoxPlantGrowthStatus;
    private javax.swing.JComboBox<String> jComboBoxSortOrder;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelControlAboutUs;
    private javax.swing.JLabel jLabelControlManageAboutUs;
    private javax.swing.JLabel jLabelCopyWriteLogin;
    private javax.swing.JLabel jLabelCopywrite;
    private javax.swing.JLabel jLabelFeedbackFormTitle;
    private javax.swing.JLabel jLabelFeedbackMessage;
    private javax.swing.JLabel jLabelFogotPassword;
    private javax.swing.JLabel jLabelGrowHome;
    private javax.swing.JLabel jLabelImageAboutUs;
    private javax.swing.JLabel jLabelImageFeedback;
    private javax.swing.JLabel jLabelImageMainBarMainPanel;
    private javax.swing.JLabel jLabelLiveDashboardTitle;
    private javax.swing.JLabel jLabelLoadingScreenPicture;
    private javax.swing.JLabel jLabelLogoLogin;
    private javax.swing.JLabel jLabelManageHome;
    private javax.swing.JLabel jLabelOurMissionAboutUs;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPlantTable;
    private javax.swing.JLabel jLabelPlantTableTitle;
    private javax.swing.JLabel jLabelPleaseWait;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSimplifyHome;
    private javax.swing.JLabel jLabelSortSearchAboutUs;
    private javax.swing.JLabel jLabelStockLevelTitle;
    private javax.swing.JLabel jLabelTotalSalesData;
    private javax.swing.JLabel jLabelTotalSalesTitle;
    private javax.swing.JLabel jLabelTotalStockLevelData;
    private javax.swing.JLabel jLabelTrackGrowthAboutUs;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JLabel jLabelUsernameError;
    private javax.swing.JLabel jLabelUsernameFeedBack;
    private javax.swing.JLabel jLabelWelcomeHome;
    private javax.swing.JPanel jPanelAboutUs;
    private javax.swing.JPanel jPanelAdminControl;
    private javax.swing.JPanel jPanelDashboard;
    private javax.swing.JPanel jPanelData;
    private javax.swing.JPanel jPanelFeedbackForm;
    private javax.swing.JPanel jPanelHomePage;
    private javax.swing.JPanel jPanelLoginData;
    private javax.swing.JPanel jPanelLoginPage;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JProgressBar jProgressBarLoadingScreen;
    private javax.swing.JScrollPane jScrollPaneMessageFeedback;
    private javax.swing.JScrollPane jScrollPanePlantTable;
    private javax.swing.JTabbedPane jTabbedPaneAdmin;
    private javax.swing.JTable jTablePlant;
    private javax.swing.JTextArea jTextAreaMessageFeedback;
    private javax.swing.JTextField jTextFieldPlantId;
    private javax.swing.JTextField jTextFieldPlantName;
    private javax.swing.JTextField jTextFieldPlantPrice;
    private javax.swing.JTextField jTextFieldSearchBar;
    private javax.swing.JTextField jTextFieldStockQuantity;
    private javax.swing.JTextField jTextFieldUsernameFeedback;
    private javax.swing.JTextField jTxtFieldUsername;
    private javax.swing.JButton jbtnAddPlant;
    private javax.swing.JButton jbtnClear;
    private javax.swing.JButton jbtndDelete;
    private javax.swing.JButton jbtnupdate;
    private javax.swing.JLabel jlabelLoginError;
    private javax.swing.JPanel jpnlLoginScreen;
    private javax.swing.JPanel jpnlMainScreen;
    private javax.swing.JPanel jpnlMainloadingScreen;
    private javax.swing.JLabel lblErrorMsgPlantBloomSeason;
    private javax.swing.JLabel lblErrorMsgPlantCategory;
    private javax.swing.JLabel lblErrorMsgPlantGrowthStatus;
    private javax.swing.JLabel lblErrorMsgPlantId;
    private javax.swing.JLabel lblErrorMsgPlantName;
    private javax.swing.JLabel lblErrorMsgPlantPrice;
    private javax.swing.JLabel lblErrorMsgStockQuantity;
    // End of variables declaration//GEN-END:variables

}
